from telethon import TelegramClient, events
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import asyncio
from openai import OpenAI
import json
from emails import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ email

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
def load_used_words():
    try:
        with open('used_words.json', 'r') as f:
            return set(json.load(f))
    except FileNotFoundError:
        return set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª
def save_used_words():
    with open('used_words.json', 'w') as f:
        json.dump(list(used_words), f)

used_words = load_used_words()

import atexit
atexit.register(save_used_words)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
clientAI = OpenAI(api_key="3PBVFay6iJzUdBxKwQ05uVYYTD8vtEZ4", base_url="https://api.deepinfra.com/v1/openai")

def generate_response_from_api(prompt: str):
    response = clientAI.chat.completions.create(
        model="meta-llama/Meta-Llama-3-70B-Instruct",
        messages=[{'role': 'user', 'content': prompt}],
        temperature=0.8,
        max_tokens=300
    )
    if response.choices:
        return response.choices[0].message.content
    return None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
API_ID = '18722935'
API_HASH = '09f2b2156abdc9276eb52e173036311a'
BOT_TOKEN = '7163780616:AAHOvYDuloy3x4JY9V8d5U0RQMlvSyGXsWU'
NAMES_IDS = [
    '@mari_vakansii', '@dnative_job', '@algoritm_schools', '@normrabota', '@polyaluzjob',
    '@digital_rabota', '@workindesign', '@designer_ru', '@workasap',
    '@jun_hi_vacancies', '@Vakansi_Rus', '@Visionisland', '@designizer', '@zakaz_design',
    '@vakanser_digital_smm', '@the_pomogator', '@workk_on', '@naudalenkebro', '@INFOGRAPHIKAQ',
    '@infografika_dizaynz', '@MPdesigns', '@distantsiya', '@vakansii_infobiz', '@vakansii_dizaynerov',
    '@vakansii_design', '@freelancetaverna', '@dl_marketplace', '@desinger_vacancies', '@uvetrovoi',
    '@workfordesigner', '@Designs_job', '@dsgn_vacancies', '@vakansii_design', '@Designs_squad',
    '@Vakansi_Rus', '@design_freevacancies'
]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
clientTg = TelegramClient('main', API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)

welcome_message = '''–ø—Ä–∏–≤–µ—Ç! üóΩ

—ç—Ç–æ ‚Äî –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∫–æ–º–∞–Ω–¥—ã SO DESIGN. –ø—Ä–∏–Ω—Ü–∏–ø –µ–≥–æ —Ä–∞–±–æ—Ç—ã –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π:

–æ–Ω —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, —Å–æ–±–∏—Ä–∞–µ—Ç –∏–∑ –Ω–∏—Ö –∑–∞–∫–∞–∑—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∏–∑–∞–π–Ω–æ–º, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—é–¥–∞. –µ–≥–æ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –ø—Ä–∏—à–ª–æ—Å—å –±—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é.
'''

second_message = '''üìç–ê —Å–µ–π—á–∞—Å ‚Äî –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ —Å–∞–º—ã–º –≤–∞–∂–Ω—ã–º –º–æ–º–µ–Ω—Ç–∞–º:

1. –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∑–∞—è–≤–∫–∏ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏ –º–æ–¥—É–ª—å –ø–æ –ø–æ–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –æ–±—É—á–µ–Ω–∏—è. —Ç–∞–º –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–ª–∏, –∫–∞–∫ –ª—É—á—à–µ –ø–∏—Å–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –æ–±—â–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.

2. –Ω–∞—à –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∏–∑ —á–∞—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å. –∏ —Ç–∞–∫ –∫–∞–∫ –∏–Ω–æ–≥–¥–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –æ–±–∏—Ç–∞—é—Ç –º–æ—à–µ–Ω–Ω–∏–∫–∏ ‚Äî –æ–Ω–∏ –∏–Ω–æ–≥–¥–∞ –º–æ–≥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å –∏ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.

–º–æ—à–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç—å –ø–æ–ø–∞—Å—Ç—å—Å—è –≤–µ–∑–¥–µ, –∏ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –Ω–∞ –∏—Ö —É–ª–æ–≤–∫–∏.

–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—å—é, –≥–¥–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞ –Ω–∏—Ö –Ω–µ –ø–æ–ø–∞—Å—Ç—å. –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –µ–µ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

https://teletype.in/@sosomak/safe

–ö–æ–≥–¥–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—à—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ –∏ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞) –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–Ω –Ω–∞—á–Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –≤–∞–∫–∞–Ω—Å–∏–∏.'''

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_chat_ids = []

VALID_WORDS = emails

def is_valid_word(word: str) -> bool:
    return word in VALID_WORDS and word not in used_words

async def start(update: Update, context):
    image_pathw = 'welcome.jpg'
    chat_id = update.message.chat_id
    
    if chat_id not in user_chat_ids:
        await context.bot.send_message(chat_id=chat_id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–∞ –∫—É—Ä—Å–µ.')
        return
    else:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=open(image_pathw, 'rb'),
            caption=welcome_message,
            parse_mode='HTML'
        )
        button = InlineKeyboardButton("–Ø –≤—Å—ë –∏–∑—É—á–∏–ª(–∞)", callback_data="confirm")
        keyboard = InlineKeyboardMarkup([[button]])
        await context.bot.send_message(chat_id, text=second_message, reply_markup=keyboard)

async def button_callback(update: Update, context):
    query = update.callback_query
    chat_id = query.message.chat_id

    if query.data == "confirm":
        await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")
        user_states[chat_id] = True
        await context.bot.send_message(chat_id, text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –Ω–∞—á–Ω—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≤–∞–∫–∞–Ω—Å–∏–∏.")

async def message_passes_filter(message_text):
    keywords = [
        '#–¥–∏–∑–∞–π–Ω–µ—Ä', '#–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π–¥–∏–∑–∞–π–Ω–µ—Ä', '#–ª–µ–Ω–¥–∏–Ω–≥', '#–≤–µ–±–¥–∏–∑–∞–π–Ω', '#–≤–µ–±-–¥–∏–∑–∞–π–Ω',
        '#–≤–µ–±–¥–∏–∑–∞–π–Ω–µ—Ä', '#–≤–µ–±–¥–∏–∑–∞–π–Ω–µ—Ä–∞', '#–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä', '#–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä–∞',
        '#–¥–∏–∑–∞–π–Ω–µ—Ä–∞', '–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞', '–∫–∞—Ä—Ç–æ—á–∫–∞', '—Å–∞–π—Ç', '—Ç–∞–ø–ª–∏–Ω–∫',
        'taplink', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é', '–∫–∞—Ä—Ç–æ—á–∫—É', '–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É',
        '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', '–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏', '–∫–∞—Ä—Ç–æ—á–µ–∫', '—Ç–∏–ª—å–¥–∞', '—Ç–∏–ª—å–¥–µ', 'tilda', '#–¥–∏–∑–∞–π–Ω–µ—Ä',
        '#–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π–¥–∏–∑–∞–π–Ω–µ—Ä', '#–ª–µ–Ω–¥–∏–Ω–≥', '#–≤–µ–±–¥–∏–∑–∞–π–Ω', '#–≤–µ–±-–¥–∏–∑–∞–π–Ω',
        '#–≤–µ–±–¥–∏–∑–∞–π–Ω–µ—Ä', '#–≤–µ–±–¥–∏–∑–∞–π–Ω–µ—Ä–∞', '#–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä', '#–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä–∞',
        '#–¥–∏–∑–∞–π–Ω–µ—Ä–∞', '—Å–∞–π—Ç–æ–ª–æ–≥', '—Å–∞–π—Ç–æ–ª–æ–≥–∞', '–∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–µ', '—Å–∞–π—Ç—ã', '#—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞–ª–µ–π–¥–∏–Ω–≥–∞',
        '#–∫—É—Ä–∞—Ç–æ—Ä', '#UX', '#UI', '—Ä–∏–ª—Å–º–µ–π–∫–µ—Ä', '—Ä–∞–±–æ—Ç–∞'
    ]

    exclude_keywords = ['–ø–æ–º']

    message_lower = message_text.lower()
    if not any(word in message_lower for word in keywords):
        return False
    if any(word in message_lower for word in exclude_keywords):
        return False
    return True

async def handle_new_message(event):
    message = event.message
    chat_id = message.chat_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_id in user_states and user_states[chat_id]:
        print(message.text)
        if message.text and message_passes_filter(message.text):
            print(message.text)
            system_prompt = f"This message is in Russian: '{message.text}'. I need to sort this message, YOU MUST only reply to me with 'True' or 'False'. 'True' if in this message a person is looking for a designer freelancer for an order, exactly an order (not a vacancy). 'False' in any other case."
            
            is_order =  asyncio.to_thread(generate_response_from_api, system_prompt)
            
            if is_order == 'True':
                link = f"<a href='https://t.me/{event.chat.username}/{message.id}'>–°—Å—ã–ª–∫–∞</a>"
                caption_text = f'üìù <b> —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: </b> \n\n {message.text}. \n\n üì≤ <b> —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É: </b> \n\n {link}'
                
                for chat_id in user_chat_ids:
                    try:
                        image_path = 'botcover.jpg' 
                        await bot.send_photo(
                            chat_id=chat_id,
                            photo=open(image_path, 'rb'),  
                            caption=caption_text, 
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_text_message(update: Update, context):
    chat_id = update.message.chat_id
    message_text = update.message.text

    if is_valid_word(message_text):
        if chat_id not in user_chat_ids:
            user_chat_ids.append(chat_id)
            used_words.add(message_text)
            await context.bot.send_message(chat_id, text='–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.')
            await start(update, context)
    else:
        await context.bot.send_message(chat_id, text='–ü–æ—á—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')

async def run_telethon_client():
    async with clientTg:
        for channel_id in NAMES_IDS:
            try:
                entity = await clientTg.get_entity(channel_id)
                print(f"joined to the channel: {entity.title}")
                clientTg.add_event_handler(handle_new_message, events.NewMessage(chats=entity))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {channel_id}: {e}")
        await clientTg.run_until_disconnected()

async def run_telegram_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    await application.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    await application.start()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.updater.start_polling()

async def main():
    await asyncio.gather(run_telegram_bot(), run_telethon_client())

if __name__ == "__main__":
    asyncio.run(main())
